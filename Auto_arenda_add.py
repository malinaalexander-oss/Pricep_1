# bot_rent_vacant_vertical.py
import json
import asyncio
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

# ================== –ù–ê–°–¢–†–û–ô–ö–ò ==================
TOKEN = "8151509290:AAHSTotV96q22XF9RuRL_zSWvNMJlkTbBHA"  # <-- –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω
OWNER_ID = 3437915
DATA_FILE = "data.json"

# ================== –•–†–ê–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• ==================
def load_data():
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {"categories": {}, "bookings": []}

def save_data(d):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(d, f, indent=2, ensure_ascii=False)

data = load_data()

# ================== –ü–†–ò–¶–ï–ü–´ ==================
if not data["categories"]:
    data["categories"] = {
        "–¥–ª—è –¥–∞—á–∏": [
            {"id": 101, "name": "X123XX178", "location": "–ü—Ä. –ù–∞—É–∫–∏ 25"},
            {"id": 102, "name": "A456AA178", "location": "–ü—Ä. –ù–∞—É–∫–∏ 25"},
            {"id": 103, "name": "B789BB178", "location": "–ü—Ä. –ù–∞—É–∫–∏ 25"}
        ],
        "–æ—Ç–∫—Ä—ã—Ç—ã–π": [
            {"id": 201, "name": "C234CC178", "location": "–ü—Ä. –ù–∞—É–∫–∏ 25"},
            {"id": 202, "name": "D567DD178", "location": "–ü—Ä. –ù–∞—É–∫–∏ 25"},
            {"id": 203, "name": "E890EE178", "location": "–ü—Ä. –ù–∞—É–∫–∏ 25"}
        ],
        "–∑–∞–∫—Ä—ã—Ç—ã–π": [
            {"id": 301, "name": "F321FF178", "location": "–ü—Ä. –ù–∞—É–∫–∏ 25"},
            {"id": 302, "name": "G654GG178", "location": "–ü—Ä. –ù–∞—É–∫–∏ 25"},
            {"id": 303, "name": "H987HH178", "location": "–ü—Ä. –ù–∞—É–∫–∏ 25"}
        ],
        "—ç–Ω–¥—É—Ä–æ": [
            {"id": 401, "name": "I135II178", "location": "–£–º–∞–Ω—Å–∫–∏–π –ø–µ—Ä. 77"},
            {"id": 402, "name": "J246JJ178", "location": "–£–º–∞–Ω—Å–∫–∏–π –ø–µ—Ä. 77"},
            {"id": 403, "name": "K357KK178", "location": "–£–º–∞–Ω—Å–∫–∏–π –ø–µ—Ä. 77"}
        ]
    }
    save_data(data)

# ================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==================
def iso_to_dt(s): return datetime.fromisoformat(s)
def overlaps(a_start, a_end, b_start, b_end): return a_start < b_end and b_start < a_end

def is_available(trailer_id: int, desired_start: datetime, desired_end: datetime) -> bool:
    for b in data["bookings"]:
        if b["trailer_id"] != trailer_id or b.get("status") in ["finished", "cancelled"]:
            continue
        if overlaps(iso_to_dt(b["start_time"]), iso_to_dt(b["end_time"]), desired_start, desired_end):
            return False
    return True

def get_main_button(user_id: int):
    active = next((b for b in data["bookings"]
                   if b["user_id"] == user_id and b["status"] == "active" and b.get("taken")), None)
    kb = InlineKeyboardBuilder()
    if active:
        kb.row(types.InlineKeyboardButton(text="üöõ –°–¥–∞—Ç—å –ø—Ä–∏—Ü–µ–ø", callback_data="return_trailer"))
    else:
        kb.row(types.InlineKeyboardButton(text="üìù –û—Ñ–æ—Ä–º–∏—Ç—å –∞—Ä–µ–Ω–¥—É", callback_data="start_rent"))
    if user_id == OWNER_ID:
        kb.row(types.InlineKeyboardButton(text="‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="owner_settings"))
    return kb.as_markup()

user_state = {}

# ================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê ==================
bot = Bot(token=TOKEN)
dp = Dispatcher()

# ================== –ö–û–ú–ê–ù–î–´ ==================
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_button(message.from_user.id))

# ================== –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö ==================
@dp.callback_query(lambda c: c.data == "start_rent")
async def start_rent(callback: types.CallbackQuery):
    await callback.answer()
    kb = InlineKeyboardBuilder()
    for cat in data["categories"]:
        kb.row(types.InlineKeyboardButton(text=cat.capitalize(), callback_data=f"cat_{cat}"))
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–∏—Ü–µ–ø–∞:", reply_markup=kb.as_markup())

# ========== –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –¥–∞—Ç—ã ========== 
@dp.callback_query(lambda c: c.data.startswith("cat_"))
async def choose_category(callback: types.CallbackQuery):
    await callback.answer()
    cat = callback.data.split("_",1)[1]
    uid = callback.from_user.id
    user_state[uid] = {"step":"choose_start","category":cat}

    kb = InlineKeyboardBuilder()
    months = ["—è–Ω–≤","—Ñ–µ–≤","–º–∞—Ä","–∞–ø—Ä","–º–∞–π","–∏—é–Ω","–∏—é–ª","–∞–≤–≥","—Å–µ–Ω","–æ–∫—Ç","–Ω–æ—è","–¥–µ–∫"]
    for i in range(7):  # —Ç–æ–ª—å–∫–æ 7 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥
        date = datetime.now() + timedelta(days=i)
        kb.row(types.InlineKeyboardButton(
            text=f"{date.day} {months[date.month-1]}", callback_data=f"start_{i}"))
    kb.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="start_rent"))

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—ã:", reply_markup=kb.as_markup())

@dp.callback_query(lambda c: c.data.startswith("start_"))
async def choose_start(callback: types.CallbackQuery):
    await callback.answer()
    uid = callback.from_user.id
    start_delay = int(callback.data.split("_",1)[1])
    user_state[uid]["start_delay"] = start_delay

    kb = InlineKeyboardBuilder()
    for d in range(1,8):
        kb.row(types.InlineKeyboardButton(text=f"{d} –¥–Ω", callback_data=f"dur_{d}"))
    kb.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"cat_{user_state[uid]['category']}"))

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã (–¥–Ω–∏):", reply_markup=kb.as_markup())
    user_state[uid]["step"]="choose_duration"

@dp.callback_query(lambda c: c.data.startswith("dur_"))
async def choose_duration(callback: types.CallbackQuery):
    await callback.answer()
    uid = callback.from_user.id
    duration = int(callback.data.split("_",1)[1])
    start = datetime.now() + timedelta(days=user_state[uid]["start_delay"])
    end = start + timedelta(days=duration)
    user_state[uid].update({"duration":duration, "start":start.isoformat(), "end":end.isoformat()})

    category = user_state[uid]["category"]
    available_trailers = [t for t in data["categories"][category] if is_available(t["id"], start, end)]

    if not available_trailers:
        kb = InlineKeyboardBuilder()
        kb.row(types.InlineKeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="start_rent"))
        await callback.message.edit_text(
            "‚ùå –í—Å–µ –ø—Ä–∏—Ü–µ–ø—ã –∑–∞–Ω—è—Ç—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥.",
            reply_markup=kb.as_markup()
        )
        user_state.pop(uid)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∞–¥—Ä–µ—Å–∞–º–∏ –∏ –Ω–æ–º–µ—Ä–∞–º–∏
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—Ü–µ–ø:\n\n"
    kb = InlineKeyboardBuilder()
    for t in available_trailers:
        text += f"–ü—Ä–∏—Ü–µ–ø: {t['name']}\n–ê–¥—Ä–µ—Å: {t['location']}\n\n"  # –Ω–æ–º–µ—Ä –∏ –∞–¥—Ä–µ—Å —Ç–µ–∫—Å—Ç–æ–º
        kb.row(types.InlineKeyboardButton(text=f"–í—ã–±—Ä–∞—Ç—å {t['name']}", callback_data=f"trailer_{t['id']}"))

    kb.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"start_{user_state[uid]['start_delay']}"))

    await callback.message.edit_text(text, reply_markup=kb.as_markup())
    user_state[uid]["step"]="choose_trailer"


@dp.callback_query(lambda c: c.data.startswith("trailer_"))
async def confirm_booking(callback: types.CallbackQuery):
    await callback.answer()
    uid = callback.from_user.id
    trailer_id = int(callback.data.split("_",1)[1])
    start = iso_to_dt(user_state[uid]["start"])
    end = iso_to_dt(user_state[uid]["end"])

    trailer = next(t for t in sum(data["categories"].values(), []) if t["id"]==trailer_id)

    booking = {
        "user_id": uid,
        "username": callback.from_user.username,
        "trailer_id": trailer_id,
        "start_time": start.isoformat(),
        "end_time": end.isoformat(),
        "status": "active",
        "taken": False,
        "created_at": datetime.now().isoformat()
    }
    data["bookings"].append(booking)
    save_data(data)
    user_state.pop(uid)

    await bot.send_message(OWNER_ID,
        f"üîî –ù–æ–≤–∞—è –±—Ä–æ–Ω—å!\n@{callback.from_user.username or uid}\n–ü—Ä–∏—Ü–µ–ø {trailer['name']}, {trailer['location']}\n"
        f"{start.strftime('%d.%m.%Y')} ‚Äì {end.strftime('%d.%m.%Y')}")

    kb = InlineKeyboardBuilder()
    kb.row(types.InlineKeyboardButton(text="üöõ –ó–∞–±—Ä–∞—Ç—å –ø—Ä–∏—Ü–µ–ø", callback_data="take_trailer"))
    await callback.message.edit_text(
        f"‚úÖ –ë—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–∞!\n–ü—Ä–∏—Ü–µ–ø: {trailer['name']}\n–ê–¥—Ä–µ—Å: {trailer['location']}\n"
        f"–ü–µ—Ä–∏–æ–¥ –∞—Ä–µ–Ω–¥—ã: {start.strftime('%d.%m.%Y')} ‚Äì {end.strftime('%d.%m.%Y')}",
        reply_markup=kb.as_markup()
    )

# ================== –ó–ê–ë–†–ê–¢–¨ –ü–†–ò–¶–ï–ü ==================
@dp.callback_query(lambda c: c.data=="take_trailer")
async def take_trailer(callback: types.CallbackQuery):
    await callback.answer()
    uid = callback.from_user.id
    booking = next((b for b in data["bookings"] if b["user_id"]==uid and b["status"]=="active" and not b.get("taken")), None)
    if not booking:
        await callback.message.answer("‚ùå –ù–µ—Ç –±—Ä–æ–Ω–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –∑–∞–±–æ—Ä–∞.")
        return
    user_state[uid] = {"step":"await_photo_take","booking":booking}
    await callback.message.answer("üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–∏—Ü–µ–ø–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏.")

@dp.message(lambda m: m.from_user.id in user_state and user_state[m.from_user.id]["step"]=="await_photo_take")
async def photo_take(message: types.Message):
    if not message.photo:
        await message.answer("‚ùå –≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏—Ü–µ–ø–∞.")
        return
    uid = message.from_user.id
    file_id = message.photo[-1].file_id
    booking = user_state[uid]["booking"]
    booking["taken"] = True
    save_data(data)
    await bot.send_photo(OWNER_ID, photo=file_id, caption=f"üì∏ –ü—Ä–∏—Ü–µ–ø –∑–∞–±—Ä–∞–Ω @{message.from_user.username or uid}")
    user_state.pop(uid)
    await message.answer("‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü—É. –ö–Ω–æ–ø–∫–∞ '–°–¥–∞—Ç—å –ø—Ä–∏—Ü–µ–ø' –ø–æ—è–≤–∏—Ç—Å—è –≤ –≤–∞—à–µ–º –º–µ–Ω—é.", reply_markup=get_main_button(uid))

# ================== –°–î–ê–¢–¨ –ü–†–ò–¶–ï–ü ==================
@dp.callback_query(lambda c: c.data=="return_trailer")
async def return_trailer(callback: types.CallbackQuery):
    await callback.answer()
    uid = callback.from_user.id
    booking = next((b for b in data["bookings"] if b["user_id"]==uid and b["status"]=="active" and b.get("taken")), None)
    if not booking:
        await callback.message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∞—Ä–µ–Ω–¥—ã.")
        return
    user_state[uid] = {"step":"await_photo_return","booking":booking}
    await callback.message.answer("üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–∏—Ü–µ–ø–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ.")

@dp.message(lambda m: m.from_user.id in user_state and user_state[m.from_user.id]["step"]=="await_photo_return")
async def photo_return(message: types.Message):
    if not message.photo:
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–∏—Ü–µ–ø–∞.")
        return
    uid = message.from_user.id
    user_state[uid]["photo_trailer"] = message.photo[-1].file_id
    user_state[uid]["step"]="await_photo_check"
    await message.answer("üìÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ.")

@dp.message(lambda m: m.from_user.id in user_state and user_state[m.from_user.id]["step"]=="await_photo_check")
async def photo_check(message: types.Message):
    if not message.photo:
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞.")
        return
    uid = message.from_user.id
    booking = user_state[uid]["booking"]
    booking["status"]="finished"
    booking["photo_return"] = user_state[uid]["photo_trailer"]
    booking["photo_check"] = message.photo[-1].file_id
    save_data(data)
    await bot.send_photo(OWNER_ID, photo=user_state[uid]["photo_trailer"], caption=f"üì∏ –ü—Ä–∏—Ü–µ–ø –≤–æ–∑–≤—Ä–∞—â–µ–Ω @{message.from_user.username or uid}")
    await bot.send_photo(OWNER_ID, photo=message.photo[-1].file_id, caption=f"üìÑ –ß–µ–∫ @{message.from_user.username or uid}")
    user_state.pop(uid)
    await message.answer("‚úÖ –í–æ–∑–≤—Ä–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=get_main_button(uid))

# ================== –ù–ê–°–¢–†–û–ô–ö–ò –í–õ–ê–î–ï–õ–¨–¶–ê ==================
@dp.callback_query(lambda c: c.data=="owner_settings")
async def owner_settings(callback: types.CallbackQuery):
    await callback.answer()
    kb = InlineKeyboardBuilder()
    kb.row(types.InlineKeyboardButton(text="üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="show_stats"))
    kb.row(types.InlineKeyboardButton(text="üóë –°–±—Ä–æ—Å–∏—Ç—å –∞—Ä–µ–Ω–¥—É", callback_data="reset_booking"))
    kb.row(types.InlineKeyboardButton(text="üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏—Ü–µ–ø–∞–º–∏", callback_data="manage_trailers"))
    kb.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main"))
    await callback.message.edit_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞:", reply_markup=kb.as_markup())

# ================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–ò–¶–ï–ü–ê–ú–ò (–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é) ==================
@dp.callback_query(lambda c: c.data=="manage_trailers")
async def manage_trailers(callback: types.CallbackQuery):
    await callback.answer()
    kb = InlineKeyboardBuilder()
    kb.row(types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏—Ü–µ–ø", callback_data="add_trailer"))
    kb.row(types.InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–∏—Ü–µ–ø", callback_data="delete_trailer"))
    kb.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="owner_settings"))
    await callback.message.edit_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏—Ü–µ–ø–∞–º–∏:", reply_markup=kb.as_markup())

# ================== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ==================
@dp.callback_query(lambda c: c.data=="show_stats")
async def show_stats(callback: types.CallbackQuery):
    await callback.answer()
    now = datetime.now()
    active_bookings = [b for b in data["bookings"] if b["status"]=="active" and iso_to_dt(b["start_time"]) <= now <= iso_to_dt(b["end_time"])]
    future_bookings = [b for b in data["bookings"] if b["status"]=="active" and iso_to_dt(b["start_time"]) > now]

    text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n–ê–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã:\n"
    if active_bookings:
        for b in active_bookings:
            text += f"–ü—Ä–∏—Ü–µ–ø {b['trailer_id']}: {iso_to_dt(b['start_time']).strftime('%d.%m')} ‚Äì {iso_to_dt(b['end_time']).strftime('%d.%m')} @{b['username'] or b['user_id']}\n"
    else:
        text += "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥\n"
    text += "\n–ë—É–¥—É—â–∏–µ –±—Ä–æ–Ω–∏:\n"
    if future_bookings:
        for b in future_bookings:
            text += f"–ü—Ä–∏—Ü–µ–ø {b['trailer_id']}: {iso_to_dt(b['start_time']).strftime('%d.%m')} ‚Äì {iso_to_dt(b['end_time']).strftime('%d.%m')} @{b['username'] or b['user_id']}\n"
    else:
        text += "–ù–µ—Ç –±—É–¥—É—â–∏—Ö –±—Ä–æ–Ω–µ–π\n"

    kb = InlineKeyboardBuilder()
    kb.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="owner_settings"))
    await callback.message.edit_text(text, reply_markup=kb.as_markup())

# ================== –°–ë–†–û–° –ê–†–ï–ù–î ==================
@dp.callback_query(lambda c: c.data=="reset_booking")
async def reset_booking(callback: types.CallbackQuery):
    await callback.answer()
    now = datetime.now()
    bookings_list = [b for b in data["bookings"] if b["status"]=="active" and iso_to_dt(b["end_time"]) >= now]
    if not bookings_list:
        await callback.message.edit_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–ª–∏ –±—É–¥—É—â–∏—Ö –∞—Ä–µ–Ω–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞.", reply_markup=get_main_button(OWNER_ID))
        return
    kb = InlineKeyboardBuilder()
    for b in bookings_list:
        kb.row(types.InlineKeyboardButton(
            text=f"{b['trailer_id']} | {iso_to_dt(b['start_time']).strftime('%d.%m')} ‚Äì {iso_to_dt(b['end_time']).strftime('%d.%m')} @{b['username'] or b['user_id']}",
            callback_data=f"reset_{b['trailer_id']}_{b['user_id']}_{b['start_time']}"
        ))
    kb.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="owner_settings"))
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä–µ–Ω–¥—É –¥–ª—è —Å–±—Ä–æ—Å–∞:", reply_markup=kb.as_markup())

@dp.callback_query(lambda c: c.data.startswith("reset_"))
async def do_reset(callback: types.CallbackQuery):
    await callback.answer()
    parts = callback.data.split("_",3)
    trailer_id, user_id, start_time = int(parts[1]), int(parts[2]), parts[3]
    booking = next((b for b in data["bookings"] if b["trailer_id"]==trailer_id and b["user_id"]==user_id and b["start_time"]==start_time), None)
    if booking:
        booking["status"]="cancelled"
        save_data(data)
        await callback.message.answer(f"‚úÖ –ë—Ä–æ–Ω—å –ø—Ä–∏—Ü–µ–ø–∞ {trailer_id} –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await reset_booking(callback)

# ================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–ò–¶–ï–ü–ê–ú–ò ==================
@dp.callback_query(lambda c: c.data=="add_trailer")
async def add_trailer_start(callback: types.CallbackQuery):
    await callback.answer()
    uid = callback.from_user.id
    user_state[uid] = {"step":"add_trailer_category"}
    
    kb = InlineKeyboardBuilder()
    for cat in data["categories"]:
        kb.row(types.InlineKeyboardButton(text=cat.capitalize(), callback_data=f"newcat_{cat}"))
    kb.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="manage_trailers"))
    
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–æ–≤–æ–≥–æ –ø—Ä–∏—Ü–µ–ø–∞:", reply_markup=kb.as_markup())

@dp.callback_query(lambda c: c.data.startswith("newcat_"))
async def add_trailer_category(callback: types.CallbackQuery):
    await callback.answer()
    uid = callback.from_user.id
    cat = callback.data.split("_",1)[1]
    user_state[uid].update({"category":cat, "step":"add_trailer_number"})
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–æ–≤–æ–≥–æ –ø—Ä–∏—Ü–µ–ø–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –•123–•–•178):")

@dp.message(lambda m: m.from_user.id in user_state and user_state[m.from_user.id]["step"]=="add_trailer_number")
async def add_trailer_number(message: types.Message):
    uid = message.from_user.id
    user_state[uid]["number"] = message.text.strip()
    user_state[uid]["step"] = "add_trailer_location"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏—Ü–µ–ø–∞:")

@dp.message(lambda m: m.from_user.id in user_state and user_state[m.from_user.id]["step"]=="add_trailer_location")
async def add_trailer_location(message: types.Message):
    uid = message.from_user.id
    category = user_state[uid]["category"]
    number = user_state[uid]["number"]
    location = message.text.strip()
    


    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –ø—Ä–∏—Ü–µ–ø —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º id
    existing_ids = [t["id"] for t in data["categories"][category]]
    new_id = max(existing_ids, default=100) + 1
    
    data["categories"][category].append({"id":new_id, "name":number, "location":location})
    save_data(data)
    user_state.pop(uid)
    
    await message.answer(f"‚úÖ –ü—Ä–∏—Ü–µ–ø {number} ({location}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category}'", reply_markup=get_main_button(OWNER_ID))

@dp.callback_query(lambda c: c.data=="delete_trailer")
async def delete_trailer_start(callback: types.CallbackQuery):
    await callback.answer()
    uid = callback.from_user.id
    user_state[uid] = {"step":"delete_select_category"}
    
    kb = InlineKeyboardBuilder()
    for cat in data["categories"]:
        kb.row(types.InlineKeyboardButton(text=cat.capitalize(), callback_data=f"delcat_{cat}"))
    kb.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="manage_trailers"))
    
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–∏—Ü–µ–ø–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb.as_markup())

@dp.callback_query(lambda c: c.data.startswith("delcat_"))
async def delete_trailer_category(callback: types.CallbackQuery):
    await callback.answer()
    uid = callback.from_user.id
    cat = callback.data.split("_",1)[1]
    user_state[uid].update({"category":cat, "step":"delete_select_trailer"})
    
    kb = InlineKeyboardBuilder()
    for t in data["categories"][cat]:
        kb.row(types.InlineKeyboardButton(text=f"{t['name']} ‚Äì {t['location']}", callback_data=f"deltrailer_{t['id']}"))
    kb.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="delete_trailer"))
    
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—Ü–µ–ø –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb.as_markup())

@dp.callback_query(lambda c: c.data.startswith("deltrailer_"))
async def delete_trailer_confirm(callback: types.CallbackQuery):
    await callback.answer()
    uid = callback.from_user.id
    trailer_id = int(callback.data.split("_",1)[1])
    cat = user_state[uid]["category"]
    
    data["categories"][cat] = [t for t in data["categories"][cat] if t["id"] != trailer_id]
    save_data(data)
    user_state.pop(uid)
    
    await callback.message.edit_text(f"‚úÖ –ü—Ä–∏—Ü–µ–ø —É–¥–∞–ª–µ–Ω –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{cat}'", reply_markup=get_main_button(OWNER_ID))


# ================== –ó–ê–ü–£–°–ö ==================
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ CTRL+C –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
    await dp.start_polling(bot)

if __name__=="__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
